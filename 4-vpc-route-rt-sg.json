{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template deploys a VPC that spans two Availability zones (AZs).
  The template creates a Web Tier, App Tier and a Data Tier in two AZs.
  Creates an internet gateway  and attaches it to the VPC. In addition, the template creates EIP and NAT Gateways in both AZs,
  creates , Routes and Route Tables and creates all logical associations with subnets to appropriately route all traffics.
  Security groups will be created for Bastion Host, Application Load Balancer, Web Tier, App Tier and Data Tier
  This is a monolithic template and the rest of the templates in the series will build on this template.",

    "Metadata": {},
  "Parameters": {
    "AbakwaVpcCIDR": {
      "Description": "-",
      "Type": "String",
      "Default": "10.192.0.0/16"
    },
    "AbakwaWebCIDR1": {
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
      "Type": "String",
      "Default": "10.192.10.0/24"
    },
    "AbakwaWebCIDR2": {
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the Second Availability Zone",
      "Type": "String",
      "Default": "10.192.11.0/24"
    },
    "AbakwaAppCIDR1": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.20.0/24"
    },
    "AbakwaAppCIDR2": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.21.0/24"
    },
    "AbakwaDataCIDR1": {
      "Description": "Please enter the IP range (CIDR notation) for the third private subnet in the first Availability Zone",
      "Type": "String",
      "Default": "10.192.30.0/24"
    },
    "AbakwaDataCIDR2": {
      "Description": "Please enter the IP range (CIDR notation) for the fourth private subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.31.0/24"
    },
    "AbakwaAMIID": {
      "Description": "Enter the AMI ID for the Instance",
      "Type": "String",
      "Default": "ami-0fa49cc9dc8d62c84"
    },
    "AbakwaInstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m1.small",
        "m1.large"
      ],
      "Description": "Enter t2.micro, m1.small, or m1.large. Default is t2.micro."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    },
  },  #End of parameters
    "Mappings": {},
  "Conditions": {},
  "Resources": {
    "AbakwaVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "AbakwaVpcCIDR"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa VPC for three tier Architecture Project"
          }
        ]
      }
    },

      # Create an Intenet Gateway named AbakwaIGW and attach to VPC called AbakwaVPC
      "AbakwaIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Internet Gateway"
          }
        ]
      }
    },
    "AbakwaAttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "InternetGatewayId": {
          "Ref": "AbakwaIGW"
        }
      }
    },
    "AbakwaWebServerSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2a",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaWebCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa WebServer Public Subnet1 |us-east-2a"
          }
        ]
      }
    },
    "AbakwaWebServerSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2b",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaWebCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa WebServer Public Subnet2 |us-east-2b"
          }
        ]
      }
    },
    "AbakwaAppServerSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2a",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaAppCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa AppServer Private Subnet1 |us-east-2a"
          }
        ]
      }
    },
    "AbakwaAppServerSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2b",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaAppCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa AppServer Private Subnet2 |us-east-2b"
          }
        ]
      }
    },
    "AbakwaDataSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2a",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaDataCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Data Private Subnet3 |us-east-2a"
          }
        ]
      }
    },
    "AbakwaDataSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2b",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaDataCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Data Private Subnet4 |us-east-2b"
          }
        ]
      }
    },
    "AbakwaNatGateway1EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": {
          "Ref": "AbakwaVPC"
        }
      }
    },
    "AbakwaNatGateway2EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": {
          "Ref": "AbakwaVPC"
        }
      }
    },
    "AbakwaNatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "AbakwaNatGateway1EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AbakwaNatGateway1"
          }
        ]
      }
    },
    "AbakwaNatGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "AbakwaNatGateway2EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AbakwaNatGateway2"
          }
        ]
      }
    },
    "AbakwaPublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Public Route Table"
          }
        ]
      }
    },
    "AbakwaPublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AbakwaPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AbakwaIGW"
        }
      }
    },
    "AbakwaWebSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet1"
        },
        "RouteTableId": {
          "Ref": "AbakwaPublicRouteTable"
        }
      }
    },
    "AbakwaWebSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet2"
        },
        "RouteTableId": {
          "Ref": "AbakwaPublicRouteTable"
        }
      }
    },

    "AbakwaAppDataRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "App | Abakwa Private Route Table1"
          }
        ]
      }
    },

    "AbakwaAppSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaAppServerSubnet1"
        },
        "RouteTableId": {
          "Ref": "AbakwaAppDataRouteTable"
        }
      }
    },

    "AbakwaAppSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaAppServerSubnet2"
        },
        "RouteTableId": {
          "Ref": "AbakwaAppDataRouteTable"
        }
      }
    },


    "AbakwaDataSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaDataSubnet1"
        },
        "RouteTableId": {
          "Ref": "AbakwaAppDataRouteTable"
        }
      }
    },

    "AbakwaDataSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaDataSubnet2"
        },
        "RouteTableId": {
          "Ref": "AbakwaAppDataRouteTable"
        }
      }
    },
# Create Security Group for the Bastion Host
    "AbakwaBastionSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : "Bastion Security Group Allows traffic to Web and App Tiers",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 22,
            "CidrIp" : "0.0.0.0/0"
        }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 65535,
            "CidrIp" : "0.0.0.0/0"
        }]
    }
},

# Create Security Group for the Application LoadBalancer

  "AbakwaApplicationLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Application LoadBalancer Security Group Allows traffic to the WebTier",
        "VpcId" : {"Ref" : "AbakwaVPC"},
      "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 80,
          "CidrIp" : "0.0.0.0/0"
      }],
      "SecurityGroupEgress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 65535,
          "CidrIp" : "0.0.0.0/0"
      }]
  }
},

"AbakwaInternalLoadBalancerSecurityGroup" : {
  "Type" : "AWS::EC2::SecurityGroup",
  "Properties" : {
      "GroupDescription" : "Internal LoadBalancer Security Group Allow WebTier traffic to the AppTier",
      "VpcId" : {"Ref" : "AbakwaVPC"},
      "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 80,
          "SourceSecurityGroupId": { "Ref": "AbakwaWebTierSecurityGroup" }
      }],
      "SecurityGroupEgress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : 22,
          "ToPort" : 22,
          "SourceSecurityGroupId" : { "Ref": "AbakwaWebTierSecurityGroup" }
      }],
      "SecurityGroupEgress": [
        {
          "IpProtocol": "tcp",
          "FromPort": 0,
          "ToPort": 65535,
          "CidrIp": "0.0.0.0/0"
        }]
    }
  },


"AbakwaWebTierSecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
       "GroupDescription" : "Allow traffic from Application LoadBalancer to WebTier",
       "VpcId" : {"Ref" : "AbakwaVPC"},
       "SecurityGroupIngress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : 80,
           "ToPort" : 80,
           "SourceSecurityGroupId": { "Ref": "AbakwaApplicationLoadBalancerSecurityGroup" }
       }],
       "SecurityGroupEgress" : [{
           "IpProtocol" : "tcp",
           "FromPort" : 22,
           "ToPort" : 22,
           "SourceSecurityGroupId": { "Ref": "AbakwaBastionSecurityGroup" }
       }],
       "SecurityGroupEgress": [
         {
           "IpProtocol": "tcp",
           "FromPort": 0,
           "ToPort": 65535,
           "CidrIp": "0.0.0.0/0"
         }]
     }
   },

   "AbakwaAppTierSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : "Allow traffic from Internal Load Balancer to AppTier",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "SourceSecurityGroupId": { "Ref": "AbakwaInternalLoadBalancerSecurityGroup" }
        }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 22,
            "SourceSecurityGroupId": "AbakwaIBastionSecurityGroup"
        }],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "CidrIp": "0.0.0.0/0"
          }]
      }
    },

    "AbakwaDataTierSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : "Allow http to client host",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "SourceSecurityGroupId": { "Ref": "AbakwaAppTierSecurityGroup" }
        }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 65535,
            "CidrIp" : "0.0.0.0/0"
        }]
    }
},




  }, # End of Resources
    "Outputs": {}
}

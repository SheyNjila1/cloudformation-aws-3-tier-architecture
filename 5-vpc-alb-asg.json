{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template deploys a VPC, with a pair of public
    and private subnets spread across two Availability Zones. It deploys
     an internet gateway, with a default route on the public subnets.
     It deploys a pair of NAT gateways (one in each AZ), and default routes
     for them in the private subnets",

  "Metadata": {},

  "Parameters": {
    "AbakwaVpcCIDR": {
      "Description": "-",
      "Type": "String",
      "Default": "10.192.0.0/16"
    },
    "AbakwaWebCIDR1": {
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
      "Type": "String",
      "Default": "10.192.10.0/24"
    },
    "AbakwaWebCIDR2": {
      "Description": "Please enter the IP range (CIDR notation) for the public subnet in the Second Availability Zone",
      "Type": "String",
      "Default": "10.192.11.0/24"
    },
    "AbakwaAppCIDR1": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.20.0/24"
    },
    "AbakwaAppCIDR2": {
      "Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.21.0/24"
    },
    "AbakwaDataCIDR1": {
      "Description": "Please enter the IP range (CIDR notation) for the third private subnet in the first Availability Zone",
      "Type": "String",
      "Default": "10.192.30.0/24"
    },
    "AbakwaDataCIDR2": {
      "Description": "Please enter the IP range (CIDR notation) for the fourth private subnet in the second Availability Zone",
      "Type": "String",
      "Default": "10.192.31.0/24"
    },
    "AbakwaAMIID": {
      "Description": "Enter the AMI ID for the Instance",
      "Type": "String",
      "Default": "ami-0fa49cc9dc8d62c84"
    },
    "AbakwaInstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m1.small",
        "m1.large"
      ],
      "Description": "Enter t2.micro, m1.small, or m1.large. Default is t2.micro."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    },
  },  #End of parameters
    "Mappings": {},

  "Conditions": {},

  "Resources": {

    "AbakwaVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "AbakwaVpcCIDR"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa VPC for three tier Architecture Project"
          }
        ]
      }
    },

      # Create an Intenet Gateway named AbakwaIGW and attach to VPC called AbakwaVPC
      "AbakwaIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Internet Gateway"
          }
        ]
      }
    },
    "AbakwaAttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "InternetGatewayId": {
          "Ref": "AbakwaIGW"
        }
      }
    },
    "AbakwaWebServerSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2a",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaWebCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa WebServer Public Subnet1 |us-east-2a"
          }
        ]
      }
    },
    "AbakwaWebServerSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2b",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaWebCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa WebServer Public Subnet2 |us-east-2b"
          }
        ]
      }
    },
    "AbakwaAppServerSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2a",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaAppCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa AppServer Private Subnet1 |us-east-2a"
          }
        ]
      }
    },
    "AbakwaAppServerSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2b",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaAppCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa AppServer Private Subnet2 |us-east-2b"
          }
        ]
      }
    },
    "AbakwaDataSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2a",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaDataCIDR1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Data Private Subnet3 |us-east-2a"
          }
        ]
      }
    },
    "AbakwaDataSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-2b",
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "CidrBlock": {
          "Ref": "AbakwaDataCIDR2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Data Private Subnet4 |us-east-2b"
          }
        ]
      }
    },
    "AbakwaNatGateway1EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": {
          "Ref": "AbakwaVPC"
        }
      }
    },
    "AbakwaNatGateway2EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": {
          "Ref": "AbakwaVPC"
        }
      }
    },
    "AbakwaNatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "AbakwaNatGateway1EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AbakwaNatGateway1"
          }
        ]
      }
    },
    "AbakwaNatGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "AbakwaNatGateway2EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AbakwaNatGateway2"
          }
        ]
      }
    },
    "AbakwaPublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Abakwa Public Route Table"
          }
        ]
      }
    },
    "AbakwaPublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AbakwaPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AbakwaIGW"
        }
      }
    },
    "AbakwaWebSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet1"
        },
        "RouteTableId": {
          "Ref": "AbakwaPublicRouteTable"
        }
      }
    },
    "AbakwaWebSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaWebServerSubnet2"
        },
        "RouteTableId": {
          "Ref": "AbakwaPublicRouteTable"
        }
      }
    },
    "AbakwaPrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "App | Abakwa Private Route Table1"
          }
        ]
      }
    },
    "AbakwaPrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AbakwaPrivateRouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AbakwaNatGateway1"
        }
      }
    },
    "AbakwaPrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaAppServerSubnet1"
        },
        "RouteTableId": {
          "Ref": "AbakwaPrivateRoute1"
        }
      }
    },
    "AbakwaPrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaAppServerSubnet2"
        },
        "RouteTableId": {
          "Ref": "AbakwaPrivateRoute2"
        }
      }
    },
    "AbakwaPrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "AbakwaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Data | Abakwa Private Route Table2"
          }
        ]
      }
    },
    "AbakwaPrivateRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "AbakwaPrivateRouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AbakwaNatGateway2"
        }
      }
    },
    "AbakwaPrivateSubnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaDataSubnet1"
        },
        "RouteTableId": {
          "Ref": "AbakwaPrivateRoute2"
        }
      }
    },
    "AbakwaPrivateSubnet4RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "AbakwaDataSubnet2"
        },
        "RouteTableId": {
          "Ref": "AbakwaPrivateRouteTable2"
        }
      }
    },
# Create Security Group for the Bastion Host
    "AbakwaBastionSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : "Bastion Security Group Allows traffic to Web and App Tiers",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 22,
            "CidrIp" : "0.0.0.0/0"
        }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 65535,
            "CidrIp" : "0.0.0.0/0"
        }]
    }
},

# Create Security Group for the Application LoadBalancer

  "AbakwaApplicationLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Application LoadBalancer Security Group Allows traffic to the WebTier",
        "VpcId" : {"Ref" : "AbakwaVPC"},
      "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 80,
          "CidrIp" : "0.0.0.0/0"
      }],
      "SecurityGroupEgress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 65535,
          "CidrIp" : "0.0.0.0/0"
      }]
  }
},

  "AbakwaInternalLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Internal LoadBalancer Security Group Allow WebTier traffic to the AppTier",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "SourceSecurityGroupId": "AbakwaWebTierSecurityGroup"
            }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 22,
            "SourceSecurityGroupId" : "AbakwaWebTierSecurityGroup"
            }],
        "SecurityGroupEgress": [{
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "CidrIp": "0.0.0.0/0"
          }]
          }
        },

    "AbakwaWebTierSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "AbakwaVPC",
      "Properties": {
        "GroupDescription": "ApplicationLoadBalancer to web tier",
        "VpcId": "AbakwaVPC",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "SourceSecurityGroupId": "AbakwaApplicationLoadBalancerSecurityGroup"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "SourceSecurityGroupId": "AbakwaBastionSecurityGroup"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "CidrIp": "0.0.0.0/0"
          }]
        }
      },

   "AbakwaAppTierSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : "Allow traffic from Internal Load Balancer to AppTier",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "SourceSecurityGroupId": "AbakwaInternalLoadBalancerSecurityGroup"
        }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 22,
            "SourceSecurityGroupId": "AbakwaIBastionSecurityGroup"
        }],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "CidrIp": "0.0.0.0/0"
          }]
      }
    },

    "AbakwaDataTierSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : "Allow http to client host",
        "VpcId" : {"Ref" : "AbakwaVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "SourceSecurityGroupId": "AbakwaAppTierSecurityGroup"
        }],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 22,
            "ToPort" : 65535,
            "CidrIp" : "0.0.0.0/0"
        }]
        }
    },

    "Bastion": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "LatestAmiId",
        "SecurityGroupIds": { "Ref": "AbakwaBastionSecurityGroup" },
        "InstanceType": { "Ref": "AbakwaInstanceType" },
        "SubnetId": { "Ref": "AbakwaWebServerSubnet1" },
        "KeyName": "KeyName"
        }
      },

    "AbakwaBastionServer": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
              "KeyName": "KeyName",
              "DisableApiTermination": "true",
              "SubnetId": { "Ref": "AbakwaWebServerSubnet1" },
              "ImageId": { "Ref": "AbakwaAMIID" },
              "InstanceType": { "Ref": "AbakwaInstanceType" },
              "Monitoring": "false",
              "SecurityGroupIds" : { "Ref": "AbakwaBastionSecurityGroup" },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": " Abakwa Bastion Host Server"
                  }
              ],
            }
          },

    "AbakwaAutoScalingGroup": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
            "LaunchConfigurationName": { "Ref": "AbakwaLaunchConfig" },
            "MaxSize": "6",
            "MinSize": "1",
            "DesiredCapacity": "2",
            "VPCZoneIdentifier": [
              "AbakwaWebServerSubnet1",
              "AbakwaWebServerSubnet2"
            ],
            "MetricsCollection": [
              {
                "Granularity": "1Minute",
                "Metrics": [
                  "GroupMinSize",
                  "GroupMaxSize"
                ]
              }
            ],
            "TargetGroupARNs": [
              {
                "Ref": "AbakwaWebTierALBTargetGroup"
              }
            ]
          }
        },

        "AbakwaLaunchConfig": {
              "Type": "AWS::AutoScaling::LaunchConfiguration",
              "Properties": {
                "ImageId": "AbakwaAMIID",
                "SecurityGroups": ["AbakwaWebTierSecurityGroup"],
                "InstanceType": "AbakwaInstanceType",
                "KeyName": "KeyName",
                "UserData": {
                  "Fn::Base64": "#!/bin/bash\nyum update -y\nyum install -y httpd\nsystemctl start httpd\nsystemctl enable httpd\necho '<h1>Hello World</h1>' > /var/www/html/index.html\n"
                }
              }
            },

        "AbakwaWebTierLoadBalancer": {
              "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
              "Properties": {
                "Subnets": [
                  "AbakwaWebServerSubnet1",
                  "AbakwaWebServerSubnet2"
                ],
                "SecurityGroups": { "Ref": "AbakwaApplicationLoadBalancerSecurityGroup" }
              }
            },

          "AbakwaWebTierListener": {
              "Type": "AWS::ElasticLoadBalancingV2::Listener",
              "Properties": {
                "DefaultActions": [
                  {
                    "Type": "forward",
                    "TargetGroupArn": "AbakwaWebTierALBTargetGroup"
                  }
                ],
                "LoadBalancerArn": "AbakwaWebTierLoadBalancer",
                "Port": "80",
                "Protocol": "HTTP"
              }
            },

          "AbakwaWebTierALBTargetGroup": {
              "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
              "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": { "Ref": "AbakwaVPC" }
              }
            },

          "AbakwaCPUAlarmHigh": {
              "Type": "AWS::CloudWatch::Alarm",
              "Properties": {
                "AlarmDescription": "Scale-up if CPU > 50% for 1 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": "50",
                "AlarmActions": [
                  "AbakwaWebServerScaleUpPolicy"
                ],
                "Dimensions": [
                  {
                    "Name": "AutoScalingGroupName",
                    "Value": "AbakwaAppTierAutoScalingGroup"
                  }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
              }
            },

            "AbakwaCPUAlarmLow": {
              "Type": "AWS::CloudWatch::Alarm",
              "Properties": {
                "AlarmDescription": "Scale-down if CPU < 50% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "50",
                "AlarmActions": [
                  "AbakwaWebServerScaleDownPolicy"
                ],
                "Dimensions": [
                  {
                    "Name": "AutoScalingGroupName",
                    "Value": "AbakwaAppTierAutoScalingGroup"
                  }
                ],
                "ComparisonOperator": "LessThanThreshold"
              }
            },

            "AbakwaWebServerScaleUpPolicy": {
              "Type": "AWS::AutoScaling::ScalingPolicy",
              "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": "AbakwaAppTierAutoScalingGroup",
                "Cooldown": "60",
                "ScalingAdjustment": "1"
              }
            },

            "AbakwaWebServerScaleDownPolicy": {
              "Type": "AWS::AutoScaling::ScalingPolicy",
              "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": "AbakwaAppTierAutoScalingGroup",
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
              }
            },
            "AbakwaAppTierAutoScalingGroup": {
              "Type": "AWS::AutoScaling::AutoScalingGroup",
              "Properties": {
                "LaunchConfigurationName": "AbakwaAppTierLaunchConfig",
                "MaxSize": "3",
                "MinSize": "2",
                "DesiredCapacity": "2",
                "VPCZoneIdentifier": [
                  "AbakwaAppServerSubnet1",
                  "AbakwaAppServerSubnet2"
                ],
                "MetricsCollection": [
                  {
                    "Granularity": "1Minute",
                    "Metrics": [
                      "GroupMinSize",
                      "GroupMaxSize"
                    ]
                  }
                ],
                "TargetGroupARNs": [
                  {
                    "Ref": "AbakwaAppTierTargetGroup"
                  }
                ]
              }
            },

            "AbakwaAppTierLaunchConfig": {
              "Type": "AWS::AutoScaling::LaunchConfiguration",
              "Properties": {
                "ImageId": "LatestAmiId",
                "SecurityGroups": [
                  "AppTierSG"
                ],
                "InstanceType": "AbakwaInstanceType",
                "KeyName": "KeyName"
              }
            },

            "AbakwaAppTierLoadBalancer": {
              "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
              "Properties": {
                "Subnets": [
                  "AbakwaAppServerSubnet1",
                  "AbakwaDataSubnet1"
                ],
                "SecurityGroups": { "Ref": "AbakwaInternalLoadBalancerSecurityGroup" }

              }
            },

            "AbakwaAppTierListener": {
              "Type": "AWS::ElasticLoadBalancingV2::Listener",
              "Properties": {
                "DefaultActions": [
                  {
                    "Type": "forward",
                    "TargetGroupArn": "AbakwaAppTierTargetGroup"
                  }
                ],
                "LoadBalancerArn": "AbakwaAppTierLoadBalancer",
                "Port": "80",
                "Protocol": "HTTP"
              }
            },
            "AbakwaAppTierTargetGroup": {
              "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
              "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": { "Ref": "AbakwaVPC" }
              }
            },

            "AbakwaDatabase": {
              "Type": "AWS::RDS::DBInstance",
              "Properties": {
                "VPCSecurityGroups": [
                  "AbakwaDataTierSecurityGroup"
                ],
                "AllocatedStorage": "20",
                "PubliclyAccessible": "false",
                "DBInstanceClass": "db.t2.micro",
                "Engine": "MySQL",
                "MasterUsername": "MyName",
                "MasterUserPassword": "MyPassword",
                "DBSubnetGroupName": "AbakwaDatabaseSubnetGroup",
                "AvailabilityZone": "us-east-2a"
              }
            },

            "AbakwaDatabaseSubnetGroup": {
              "Type": "AWS::RDS::DBSubnetGroup",
              "Properties": {
                "DBSubnetGroupDescription": "subnet group",
                "SubnetIds": [
                  "AbakwaDataSubnet1",
                  "AbakwaDataSubnet1"
                ]
              }
            }
  }, # End of Resources
    "Outputs": {}
}
